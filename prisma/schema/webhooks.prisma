/// Webhook events that can trigger notifications
enum WebhookEventType {
  /// Service is back online after being down
  SERVICE_RECOVERY
  /// Service went down
  SERVICE_FAILURE
  /// Service has been inactive
  SERVICE_INACTIVITY
  /// Service status changed
  SERVICE_STATUS_CHANGE
  /// Regular success notification
  SUCCESS_NOTIFICATION
  /// System alerts
  SYSTEM_ALERT
  /// Custom events
  CUSTOM
}

/// Webhook delivery method
enum WebhookMethod {
  /// HTTP POST request
  POST
  /// HTTP GET request
  GET
  /// HTTP PUT request
  PUT
}

/// Represents a global webhook configuration set up by a user
model Webhook {
  /// Primary key, auto-generated
  id String @id @default(cuid())

  /// Foreign key pointing to the User table
  userId String @map("user_id")

  /// Display name for the webhook
  name String

  /// The event type that triggers this webhook
  eventType WebhookEventType @map("event_type")

  /// URL to which the webhook will send data
  targetUrl String @map("target_url")

  /// HTTP method to use for webhook
  method WebhookMethod @default(POST)

  /// Optional secret used for verification/authentication
  secret String?

  /// Signing algorithm (e.g., "sha256", "sha1")
  signAlgorithm String? @map("sign_algorithm")

  /// Optional custom headers to send with the webhook request
  headers Json?

  /// Retry configuration as JSON (attempts, backoff strategy)
  retryConfig Json? @map("retry_config")

  /// Flag to activate/deactivate the webhook
  isActive Boolean @default(true) @map("is_active")

  /// Max retries on failure
  maxRetries Int @default(3) @map("max_retries")

  /// User relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  /// Timestamp of webhook creation (defaults to current time)
  createdAt DateTime @default(now()) @map("created_at")

  /// Timestamp automatically updated whenever the row is modified
  updatedAt DateTime @updatedAt @map("updated_at")

  /// One-to-many relation to all deliveries this webhook has made
  deliveries WebhookDelivery[]

  /// Query optimizations
  @@index([userId])
  @@index([eventType])
  /// Map this model to the "webhooks" table in the database
  @@map("webhooks")
}

/// Stores the delivery logs for each webhook attempt
model WebhookDelivery {
  /// Primary key
  id String @id @default(cuid())

  /// Foreign key linking to the associated webhook
  webhookId String @map("webhook_id")

  /// Associated service ID (if relevant)
  serviceId String? @map("service_id")

  /// HTTP response status (e.g., 200, 404)
  statusCode Int? @map("status_code")

  /// Response content from the target server (truncated if large)
  response String?

  /// Error message if the webhook failed
  error String?

  /// Request payload sent
  payload Json?

  /// Number of retry attempts made
  retryCount Int @default(0) @map("retry_count")

  /// Whether delivery was successful
  successful Boolean @default(false)

  /// Response time in milliseconds
  responseTime Int? @map("response_time")

  /// Timestamp of when the webhook was sent
  sentAt DateTime @default(now()) @map("sent_at")

  /// Link back to the webhook that sent this
  webhook Webhook @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  /// Query optimizations
  @@index([webhookId])
  @@index([successful])
  @@index([sentAt])
  @@index([serviceId])
  /// Map this model to the "webhook_deliveries" table in the database
  @@map("webhook_deliveries")
}
