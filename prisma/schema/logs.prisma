/// Log severity levels
enum LogSeverity {
  /// Debug-level information
  DEBUG
  /// Informational messages
  INFO
  /// Warning messages
  WARNING
  /// Error messages
  ERROR
  /// Critical error messages
  CRITICAL
}

/// Log categories
enum LogCategory {
  /// System-level logs
  SYSTEM
  /// Service-related logs
  SERVICE
  /// Authentication-related logs
  AUTH
  /// Webhook-related logs
  WEBHOOK
  /// Database-related logs
  DATABASE
  /// API-related logs
  API
}

/// Model for storing application logs
model Log {
  /// Unique identifier for the log entry
  id String @id @default(cuid())

  /// When the log was created
  timestamp DateTime @default(now())

  /// Log severity level
  severity LogSeverity @default(INFO)

  /// Log category
  category LogCategory @default(SYSTEM)

  /// Associated service ID (nullable)
  serviceId String? @map("service_id")

  /// Service or component name
  serviceName String? @map("service_name")

  /// User ID associated with this log
  userId String? @map("user_id")

  /// IP address, nullable for events like backend events
  ipAddress String? @map("ip_address")

  /// Action type (e.g., 'Ping', 'Restart')
  actionType String @map("action_type")

  /// Status result (e.g., 'Success', 'Failure')
  status String

  /// Time taken for action in milliseconds, may be unknown for failed/incomplete actions
  duration Float?

  /// Response time in milliseconds, only for health checks
  responseTime Float? @map("response_time")

  /// Error code if an error occurred
  errorCode String? @map("error_code")

  /// Detailed error message
  errorMessage String? @map("error_message")

  /// Stack trace for errors - shows sequence of function calls that led to error
  stackTrace String? @map("stack_trace") // Fixed field name from service_track

  /// Webhook URL that triggered this log (if applicable)
  webhookUrl String? @map("webhook_url")

  /// Webhook event type (e.g., 'Push', 'Success')
  webhookEvent String? @map("webhook_event")

  /// JSON payload sent to the webhook
  webhookPayload Json? @map("webhook_payload")

  /// Additional metadata as JSON
  metadata Json?

  /// Flag to indicate if this log was sent in a notification
  notified Boolean @default(false)

  /// Query optimizations
  @@index([timestamp])
  @@index([severity])
  @@index([category])
  @@index([serviceId])
  @@index([serviceName])
  @@index([userId])
  @@index([status])
  /// Map this model to the "logs" table in the database
  @@map("logs")
}
